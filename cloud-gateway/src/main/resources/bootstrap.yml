server:
  port: 8093
#  servlet:
#    context-path: /gateway

spring:
  application:
    name: b0x0-cloud-gateway
  main:
    allow-bean-definition-overriding: true
  cloud:
    # 服务注册与发现 / 配置中心
    nacos:
      username: nacos
      password: nacos
#      server-addr: 127.0.0.1:8848
      # Nacos 服务发现与注册配置
      discovery:
        enabled: true
        register-enabled: true
        server-addr: 127.0.0.1:8848
        ephemeral: true  # false为永久实例，true表示临时实例，注册为临时实例, 默认即为临时实例
        namespace: c1affcc0-0e86-4530-875d-2153faf4eced # 命名空间 只能是uuid
      config:
        server-addr: 127.0.0.1:8848  # nacos配置中心地址
        namespace: c1affcc0-0e86-4530-875d-2153faf4eced # 命名空间 只能是uuid
        group: alibaba-cloud-examples
        file-extension: yaml  #配置文件的后缀名
        refresh-enabled: true  #默认true：自动刷新
    sentinel:
      # 取消Sentinel控制台懒加载
      # 默认情况下 Sentinel 会在客户端首次调用的时候进行初始化，开始向控制台发送心跳包
      # 配置 sentinel.eager=true 时，取消Sentinel控制台懒加载功能
      eager: true
      transport:
        port: 8719 # 用于将限流规则注册到 Sentinel 中。
        dashboard: 127.0.0.1:8888 # Sentinel 控制台地址
    # 网关
    gateway:
      # 处理响应头重复
      globalcors:
        corsConfigurations:
          '[/**]':
            # 这里有个allowCredentials: true这个东西是设置允许访问携带cookie的，这点一定要和前端对应！
            allowCredentials: true
            # 可以填写多个域名用","隔开 例如 "*"代表允许所有
            allowedOrigins: "*"
            allowedMethods: "*"
            allowedHeaders: "*"
            allow-credentials: true
      discovery:
        locator:
          # 是否与服务发现组件进行结合，通过 serviceId 转发到具体的服务实例。默认为false
          enabled: true
          lower-case-service-id: true #使用小写service-id
      routes: # 路由数组[路由 就是指定当请求满足什么条件的时候转到哪个微服务]
        - id: user-service-api          # 当前路由的标识, 要求唯一
          uri: lb://b0x0-cloud-user  # lb指的是从nacos中按照名称获取微服务,并遵循负载均衡策略
          predicates: # 断言(就是路由转发要满足的条件)
            - Path=/user/**       # 当请求路径满足Path指定的规则时,才进行路由转发
            #filters:                   # 过滤器,请求在传递过程中可以通过过滤器对其进行一定的修改
            #- StripPrefix=1           # 转发之前去掉1层路径

        - id: order-service-api
          uri: lb://b0x0-cloud-order
          predicates:
            - Path=/orders/**

        - id: product-service-api
          uri: lb://b0x0-cloud-product
          predicates:
            - Path=/products/**

        - id: auth-service-api
          uri: lb://b0x0-cloud-auth
          predicates:
            - Path=/auth/**

        - id: qq_route
          uri: https://www.qq.com
          predicates:
            - Query=url,qq

# Spring Boot Actuator
management:
  endpoints:
    web:
      exposure:
        include: "*"  # * 所有端点， beans, env, health 可以配置Endpoint IDs,其他都关闭
  endpoint:
    health:
      show-details: ALWAYS

# arthas client 配置
arthas.appName: ${spring.application.name}
arthas.agent-id: arthas_agent_gateway # 命名中不能有-
arthas.tunnel-server: ws://127.0.0.1:7777/ws
arthas.telnetPort: -1
arthas.httpPort: -1




